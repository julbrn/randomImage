{"version":3,"file":"main.js","mappings":"mBAAO,ICAMA,EAAiBC,SAASC,cAAc,UACxCC,EAASF,SAASC,cAAc,WAChCE,EAAmBH,SAASC,cAAc,2BAC1CG,EAAgBJ,SAASC,cAAc,mBACvCI,EAASL,SAASM,eAAe,UACjCC,EAAWP,SAASM,eAAe,aACnCE,EAAQR,SAASM,eAAe,SAChCG,EAAeT,SAASC,cAAc,iBACtCS,EAAaR,EAAOS,YACpBC,EAAOZ,SAASC,cAAc,SAC9BY,EAAYD,EAAKX,cAAc,gBAC/Ba,EAAYd,SAASC,cAAc,cACnCc,EAAaf,SAASgB,kBAAkB,e,0GCOrD,IAAMC,EAAgB,SAACC,GAA4C,IAAjCC,EAAiC,uDAArB,iBACxCD,GACFhB,EAAAA,YAAqBiB,EACrBjB,EAAAA,QAAe,CAAC,CAACkB,MAAO,WAAY,CAACA,MAAO,YAAa,MAEzDlB,EAAAA,YAAqBQ,GAwCzBE,EAAAA,iBAAsB,UAAU,SAACS,GAC/BA,EAAIC,iBACJ,IACIC,EAHmC,EAEjCC,EAAaX,EAAUY,MAFU,E,25BAAA,CAIhBV,GAJgB,IAIvC,IAAK,EAAL,qBAAmC,KAAxBW,EAAwB,QACjC,GAAIA,EAASC,SAA+B,YAAnBD,EAASD,MAAsB,CACtDF,EAAgB,UAAH,OAAaG,EAASD,OACnC,MAEFF,EAAgB,IATqB,+BA5BzC,SAAqBC,EAAYD,GAC/BN,GAAc,GACd,IAAMW,EATCC,KAAKC,MAAM,EAAAD,KAAKE,SASW,GAClCC,MAAM,gDAAD,OAAiDR,GAAjD,OAA8DD,EAA9D,4CFvCiB,gDEwCnBU,MAAK,SAASC,GACb,OAAOA,EAASC,UAEjBF,MAAK,SAASG,GACbC,QAAQC,IAAIF,GACZrC,EAAewC,MAAMC,gBACnB,OAASJ,EAAKK,QAAQb,GAAWc,KAAKC,QAAS,IACjDvC,EAAcO,YAAc,UAAYyB,EAAKK,QAAQb,GAAWgB,aAAeR,EAAKK,QAAQb,GAAWiB,iBAAmB,4BAC1HxC,EAAOM,YAAcyB,EAAKK,QAAQb,GAAWkB,KAAKC,KAClD,IAAMC,EAAgD,MAApCZ,EAAKK,QAAQb,GAAWkB,KAAKG,IAA7B,yBAAwEb,EAAKK,QAAQb,GAAWkB,KAAKG,IACvH1C,EAASI,YAAcqC,EACvBxC,EAAMG,YAAcuC,OAAOd,EAAKK,QAAQb,GAAWpB,OAAO2C,iBAC1D1C,EAAa2C,KAAOhB,EAAKK,QAAQb,GAAWyB,MAAMC,SApBtDnD,EAAiBoD,UAAUC,IAAI,WAC/B1C,EAAUyC,UAAUC,IAAI,WAsBpB/C,EAAagD,aAAa,SAAU,aAErCC,OAAM,SAASC,GACdtB,QAAQC,IAAIqB,GACZC,MAAM,mFAEPC,SAAQ,WAAO5C,GAAc,MAchC6C,CAAYtC,EAAYD,O","sources":["webpack://randomimage_project/./src/components/Api.js","webpack://randomimage_project/./src/components/utils.js","webpack://randomimage_project/./src/pages/index.js"],"sourcesContent":["export const clientID = 'UBzeoRZp2HJ4hKExE0IYJ7pDUM8jFzUg25tnDfYg4OA';\n","export const imageContainer = document.querySelector('.image');\nexport const button = document.querySelector('.button');\nexport const downloaderButton = document.querySelector('.button_type_downloader');\nexport const randomCaption = document.querySelector('.image__caption');\nexport const author = document.getElementById('author');\nexport const userInfo = document.getElementById('aboutUser');\nexport const likes = document.getElementById('likes')\nexport const downloadLink = document.querySelector('.downloadLink');\nexport const buttonText = button.textContent;\nexport const form = document.querySelector('.form');\nexport const formInput = form.querySelector('.form__input');\nexport const extraInfo = document.querySelector('.extraInfo');\nexport const radioBoxes = document.getElementsByName('colorPicker');\n\n","import './index.css';\nimport {clientID} from \"../components/Api.js\";\nimport {\n  imageContainer,\n  button,\n  randomCaption,\n  author,\n  userInfo,\n  likes,\n  downloadLink,\n  buttonText,\n  form,\n  formInput,\n  downloaderButton,\n  extraInfo,\n  radioBoxes\n} from \"../components/utils.js\";\n\n/**Изменение текста и цвета текста кнопки при ожидании ответа с сервера*/\nconst renderLoading = (isLoading, loadingText='Please wait...') => {\n  if (isLoading) {\n    button.textContent = loadingText;\n    button.animate([{color: '#f9bc60'}, {color: '#fffffe'}], 1000)\n  } else {\n    button.textContent = buttonText;\n  }\n}\n\nfunction selectRandomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min) }\n\nfunction showTable() {\n  downloaderButton.classList.add('visible');\n  extraInfo.classList.add('visible');\n}\n\nfunction changePhoto(preference, selectedColor) {\n  renderLoading(true);\n  const randomNum = selectRandomNum(1, 3)\n  fetch(`https://api.unsplash.com/search/photos?query=${preference}${selectedColor}&orientation=landscape&client_id=${clientID}`)\n    .then(function(response) {\n      return response.json()\n    })\n    .then(function(data){\n      console.log(data);\n      imageContainer.style.backgroundImage =\n        'url(' + data.results[randomNum].urls.regular +')';\n      randomCaption.textContent = 'Info: ' + (data.results[randomNum].description || data.results[randomNum].alt_description || 'Too good to be described');\n      author.textContent = data.results[randomNum].user.name;\n      const userAbout = data.results[randomNum].user.bio == null ? (`Preferred not to share`) : data.results[randomNum].user.bio;\n      userInfo.textContent = userAbout;\n      likes.textContent = Number(data.results[randomNum].likes).toLocaleString();\n      downloadLink.href = data.results[randomNum].links.download;\n      showTable();\n      /**Страница для скачивания фото открывается в новом окне*/\n      downloadLink.setAttribute('target', '_blank');\n    })\n    .catch(function(error) {\n      console.log(error);\n      alert('Oopsie-doopsie, something went wrong! :( Please try selecting another query.')\n    })\n    .finally(() => {renderLoading(false)})\n}\n\nform.addEventListener('submit', (evt) => {\n  evt.preventDefault();\n  const preference = formInput.value;\n  let selectedColor;\n  for (const radioBox of radioBoxes) {\n    if (radioBox.checked && (radioBox.value !== 'noColor')) {\n      selectedColor = `&color=${radioBox.value}`;\n      break;\n    }\n    selectedColor = '';\n  }\n  changePhoto(preference, selectedColor);\n});\n"],"names":["imageContainer","document","querySelector","button","downloaderButton","randomCaption","author","getElementById","userInfo","likes","downloadLink","buttonText","textContent","form","formInput","extraInfo","radioBoxes","getElementsByName","renderLoading","isLoading","loadingText","color","evt","preventDefault","selectedColor","preference","value","radioBox","checked","randomNum","Math","floor","random","fetch","then","response","json","data","console","log","style","backgroundImage","results","urls","regular","description","alt_description","user","name","userAbout","bio","Number","toLocaleString","href","links","download","classList","add","setAttribute","catch","error","alert","finally","changePhoto"],"sourceRoot":""}